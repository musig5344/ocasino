version: '3.8'

services:
  postgres:
    image: postgres:15-alpine  # PostgreSQL 15 버전 사용
    container_name: casino_postgres_local
    environment:
      POSTGRES_DB: casino_db_local
      POSTGRES_USER: casino_user
      POSTGRES_PASSWORD: test1234  # 지정된 비밀번호 사용
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # 로컬에서 5432 포트로 접근 가능
    networks:
      - casino_local_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U casino_user -d casino_db_local"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 테스트용 데이터베이스 (별도 컨테이너 또는 동일 컨테이너 내 별도 DB)
  # 여기서는 간단하게 동일 컨테이너 내 별도 DB를 가정하고,
  # 애플리케이션 설정에서 DB 이름을 분기하도록 합니다.
  # 만약 완전히 분리된 환경을 원하면 별도의 postgres 서비스를 정의합니다.

  redis:
    image: redis:7-alpine  # Redis 7 버전 사용
    container_name: casino_redis_local
    ports:
      - "6379:6379" # 로컬에서 6379 포트로 접근 가능
    volumes:
      - redis_data:/data
    networks:
      - casino_local_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2 # Kafka 호환 버전 사용 권장
    container_name: casino_zookeeper_local
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - casino_local_net

  kafka:
    image: confluentinc/cp-kafka:7.3.2 # Zookeeper와 호환 버전
    container_name: casino_kafka_local
    depends_on:
      - zookeeper
    ports:
      # Docker 외부에서 Kafka 브로커에 접근하기 위한 포트
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Docker 내부 컨테이너들이 Kafka에 접근할 때 사용하는 리스너
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      # Docker 외부 (로컬 호스트)에서 접근할 때 사용될 주소
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Kafka Connect 등 추가 기능 사용 시 관련 설정 추가 필요
    networks:
      - casino_local_net
    healthcheck:
       # 간단한 healthcheck 예시 (실제 환경에 맞게 조정 필요)
       test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
       interval: 30s
       timeout: 10s
       retries: 5

  # backend: # 백엔드 애플리케이션 서비스 (선택적 추가)
  #   build: . # 현재 디렉토리의 Dockerfile 사용
  #   container_name: casino_backend_local
  #   ports:
  #     - "8000:8000" # FastAPI 기본 포트
  #   depends_on:
  #     postgres:
  #       condition: service_healthy # postgres가 healthy 상태일 때 시작
  #     redis:
  #       condition: service_healthy # redis가 healthy 상태일 때 시작
  #     kafka:
  #       condition: service_healthy # kafka가 healthy 상태일 때 시작 (간단한 체크)
  #   environment:
  #     # .env 파일 또는 직접 환경 변수 설정
  #     # 예: DATABASE_URL, REDIS_URL, KAFKA_BOOTSTRAP_SERVERS 등
  #     DATABASE_URL: postgresql+asyncpg://casino_user:test1234@postgres:5432/casino_db_local
  #     REDIS_URL: redis://redis:6379/0
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     # 테스트 DB URL (별도 환경 변수 사용 권장)
  #     TEST_DATABASE_URL: postgresql+asyncpg://casino_user:test1234@postgres:5432/casino_db_test # 예시
  #   volumes:
  #     - .:/app # 소스 코드 마운트 (개발 편의성)
  #   networks:
  #     - casino_local_net

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  casino_local_net:
    driver: bridge 